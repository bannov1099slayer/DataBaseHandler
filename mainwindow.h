#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <QMessageBox>
#include <QDebug>
#include <QSql>
#include <QSqlError>
#include <QtSql/QSqlQuery>
#include <ctime>
#include <random>
#include <iostream>
#include <modal.h>

QT_BEGIN_NAMESPACE
namespace Ui { class MainWindow; }
QT_END_NAMESPACE

/**
@brief Класс основного окна
*/
class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    /**
    @brief Конструктор
    @detailed В конструкторе устанавливаются начальные настройки для работы с таблицей на форме
    и генерируется первичный ключ для р00
    @param parent Экземпляр класса QWidget
    */
    MainWindow(QWidget *parent = nullptr);
    /**
    @brief Деструктор
    */
    ~MainWindow();

    /**
    @brief Метод инициализации первичных значений
    @detailed Подключается драйвер для работы с PostgreSQL, настраиваются параметры для работы
    с конкретной БД, происходит подключение к БД и отображается текущая таблица на форме
    */
    void init();
    /**
    @brief Метод проверки проблем с запросом
    @detailed Проверка ошибок в запросе (в случае ошибки выведет окно с указанием проблемы)
    @param query Экземпляр класса QSqlQuery (sql-запрос, который отрабатывает)
    */
    void checkQueryProblems(QSqlQuery query);
    /**
    @brief Метод проверки существования индекса
    @detailed Проверяется, есть ли введённый индекс
    @param index Значение, которое пришло с формы модального окна
    @return true или false
    */
    bool checkRowIndexExistance(int index);
    /**
    @brief Метод генерации ключей для столбца р00
    @detailed Генерируется строка длиной 2 символа(т.к. p00 имеет тип varchar(2))
    */
    std::string randomKeyGen();

public slots:
    /**
    @brief Слот для редактирования значений в БД
    @detailed Проверяется, есть ли введённый индекс и точно ли выбрана строка, в таблицу qual_table и main_table через sql-запросы
    заносятся значения с модальной формы
    @param i1 Значение, которое пришло с формы модального окна
    @param r1 Значение, которое пришло с формы модального окна (ввёл пользователь, либо по умолчанию то, что было в лайнэдите)
    @param t1 Значение, которое пришло с формы модального окна (ввёл пользователь, либо по умолчанию то, что было в лайнэдите)
    */
    void set_data(int i1, std::string r1,std::string t1);

private slots:
    /**
    @brief Действие по нажатию кнопки Добавить
    @detailed Проверяется существование таблицы main_table, генерируется первичный ключ p00,
    в таблицу qual_table заносится сгенерированный ключ и строка "введите текст" в p01, в таблицу main_table заносится
    сгенерированный ключ и строка "введите текст" в t с помощью sql-запросов, также проверяются ошибки в запросах, обновляется таблица на форме
    */
    void on_addButton_clicked();
    /**
    @brief Действие по нажатию кнопки Удалить
    @detailed Проверяется выбрана ли строка, которую нужно удалить, если выбрана, то считывается значение из первой ячейки строки на форме (индекс таблицы
    main_table), с помощью sql-запросов удаляется строка из main_table и qual_table. Если строка не выбрана, то при нажатии кнопки Удалить вылезает окно с
    предупреждением
    */
    void on_deleteButton_clicked();
    /**
    @brief Действие по нажатию кнопки Редактировать
    @detailed Создаётся экземпляр модального окна, задаются начальные параметры для него, проверяется выбрана ли строка или нет, если выбрана, то значения
    i,r,t считываются из строки в таблице на главной форме и передаются через connect в модальное окно (для того, чтобы можно было их редактировать), модальное
    окно открывается. В случае, если строка не выбрана, то при нажатии кнопки Редактировать вылезает окно с предупреждением. Таблица обновляется.
    */
    void on_editButton_clicked();
    /**
    @brief Метод обновления таблицы на форме
    @detailed Удаляются все строки в таблице на форме, если есть связь с БД выполняется sql-запрос на выборку из двух таблиц: qual_table и main_table,
    проверяется правильность запроса, далее данные, полученные из запроса заносятся в таблицу на главной форме в соответствующие столбцы. Дополнительно
    устанавливаются всплывающие окна с данными в ячейках второго и третьего столбца.
    */
    void updateTable();
protected:
    QSqlDatabase m_db;                        // экземпляр БД, с которой работаем
private:
    Ui::MainWindow *ui;


};
#endif // MAINWINDOW_H
